#!@PERL@
# -*- cperl -*-
# -------------------------------------------------------------
# file: mass1bc.pl

# This script makes a MASS1/MASS2 format boundary condition file from
# a MASS1 time-series output file

# -------------------------------------------------------------
# -------------------------------------------------------------
# Copyright (c) 2017 Battelle Memorial Institute
# Licensed under modified BSD License. A copy of this license can be
# found in the LICENSE file in the top level directory of this
# distribution.
# -------------------------------------------------------------
# -------------------------------------------------------------
# Created October  4, 1999 by William A. Perkins
# Last Change: 2017-08-28 08:32:42 d3g096
# -------------------------------------------------------------

# RCS ID: $Id$

use strict;
use Getopt::Std;
use Date::Manip;

=pod

=head1 NAME

mass1bc.pl -- produce MASS1 or MASS2 boundary condition files from 
MASS1 gage file output

=head1 SYNOPSIS

perl mass1bc.pl B<-f> I<field> [ B<-0> | B<-O> offset ] [ B<-o> I<output> ] [ I<file> ]

perl mass1bc.pl B<-l>

=head1 DESCRIPTION

This is a simple script to extract a specific value from the gage
output of a MASS1 simulation and format it such that it could be used
as a MASS1 or MASS2 boundary condition file.  The the field is
specified using the B<-f> option with the name of the field, for
example C<temp> for temperature.  The B<-l> option will list available
fields.

This script is part of the @PACKAGE@ distribution (Version @VERSION@)

=head1 OPTIONS

=over

=item B<-l>

list the available fields by name and exit

=item B<-f> I<field>

specify the field to be extracted. The I<field> is specified by name,
for example: depth, temp, conc, etc. Use the B<-l> option to list
available fields.

=item B<-O> I<offset>

apply an (negative) offset to the output time. The format of
I<time_offset> is very flexible; the ParseDateDelta function in
L<Date::Manip> is used to parse the offset. The default is "-30
minutes", which assumes that the MASS1 output is hourly.

=item B<-0> 

specify a zero time offset.  The same effect can be accomplished by
specifying C<-O "+ 0 minutes">

=item B<-o> I<output> 

send output to the file named I<output> instead of standard output

=back

=head1 EXAMPLES

To obtain a list of available fields, use the B<-l> option:

    perk@mack> perl mass1bc.pl -l
    The following "field"s are recognized:
            conc:   TDG Gas Concentration
            depth:  Depth
            temp:   Water Temperature
            wselev: Water Surface Elevation
            vel:    Velocity
            flow:   Discharge
            sat:    TDG Saturation
            tdgpress:       TDG Pressure
    usage: mass1bc.pl -f field [-0|-O offset] [-o output] [file]
           mass1bc.pl -l


=head1 AUTHOR

William A. Perkins

=cut

# -------------------------------------------------------------
#  variable initialization
# -------------------------------------------------------------
my $program;
($program = $0) =~ s/.*\///;
my $usage = 
  "usage: $program -f field [-0|-O offset] [-o output] [-S start] [-E end] [file]\n" . 
  "       $program -l";

                                # fields that can be used for BC files

my %fields = 
(
 wselev => 3, flow => 4, vel => 5, depth => 6,
 conc => 7, temp => 8, sat => 9, tdgpress => 10
);

my %fieldnames = 
(
 wselev => "Water Surface Elevation", 
 flow => "Discharge", 
 vel => "Velocity", 
 depth => "Depth",
 conc => "TDG Gas Concentration", 
 temp => "Water Temperature", 
 sat => "TDG Saturation", 
 tdgpress => "TDG Pressure"
);

Date::Manip::Date_Init('SetDate=now,UTC');
#Date::Manip::Date_Init("TZ=-08:00");

my $field = undef;
my $offset = undef;
my $title = undef;
my $start = Date::Manip::ParseDate("01/01/1800 00:00:00");
my $end = Date::Manip::ParseDate("01/01/3800 00:00:00");

# -------------------------------------------------------------
# handle command line
# -------------------------------------------------------------
my %opts = ();
die "$usage\n" unless getopts("f:o:O:t:l0S:E:", \%opts);

if ($opts{l}) {
  printf(STDERR "The following \"field\"s are recognized:\n");
  foreach (keys(%fields)) {
    printf(STDERR "\t%s:\t%s\n", $_, $fieldnames{$_});
  }
  printf(STDERR "$usage\n");
  exit(0);
}

unless ($opts{f}) {
  printf(STDERR "$program: error: a field must be specified\n");
  die "$usage\n";
}

$field = $opts{f};
$title = $opts{t} if $opts{t};

if (! $fields{$field}) {
  printf(STDERR "$program: error: the specified field \"%s\" is not known\n", $field);
  printf(STDERR "$program: error: use -l to get a list of fields\n");
  die "$usage\n";
}

if ($opts{O}) {
  $offset = Date::Manip::ParseDateDelta($opts{O});
  unless ($offset) {
    printf(STDERR "$program: error: time offset \"%s\" not understood\n", $opts{O});
    die "$usage\n";
  }
} elsif ($opts{0}) {
  $offset = Date::Manip::ParseDateDelta("0 hour");
}

if ($opts{S}) {
  $start = Date::Manip::ParseDate($opts{S});
  unless ($start) {
    printf(STDERR "$program: error: start date/time \"%s\" not understood\n", $opts{S});
    die "$usage\n";
  }
} 

if ($opts{E}) {
  $end = Date::Manip::ParseDate($opts{E});
  unless ($end) {
    printf(STDERR "$program: error: end date/time \"%s\" not understood\n", $opts{E});
    die "$usage\n";
  }
} 



if ($opts{o}) {
  my $name = $opts{o};
  unless (open(OUTPUT, ">$name")) {
    printf(STDERR "$program: error: unable to open file \"%s\" for writing\n", 
           $name);
    die "$usage\n";
  }
} else {
  unless (open(OUTPUT, ">&STDOUT")) {
    die "$program: error: Unable to dup STDOUT\n";
  }
}

# -------------------------------------------------------------
# main program
# -------------------------------------------------------------

my $fldno = $fields{$field};
my $line = 0;

if ($title) {
  printf(OUTPUT "# %s: %s (Automatically generated using $program)\n",
         $title, $fieldnames{$field});
} else {
  printf(OUTPUT "# %s (Automatically generated using $program)\n", 
         $fieldnames{$field});  
}

while (<>) {
  chop;
  $line++;
  if (/^\d\d-\d\d-\d\d\d\d/) {
    my @fld = split();
    my $datestr = $fld[0] . " " . $fld[1];
    $datestr =~ s/-/\//g;
    my $date = Date::Manip::ParseDate($datestr);

    die "$program: error: line ${line}: date not understood\n" unless ($date);

    my $value = $fld[$fldno - 1];

    $date = Date::Manip::DateCalc($date, $offset) if ($offset);
    
    next if ($date < $start);
    next if ($date > $end);

    printf(OUTPUT "%s   %15.3f  /\n", Date::Manip::UnixDate($date, '%m-%d-%Y %H:%M:%S'), $value);
  }
}

